2024년 9월 12일 

프로젝트  만들기

1. 워크스페이스 만들기
	- C:\class\code\server

2. 원래 워크스페이스에서 이클립스 설정 export하기 
	1) File > Import > General > Preferences
	2) Export all > 파일경로 및 파일명 설정 후 Finish

3. 만든 워크스페이스 경로로 이클립스를 열고 import하기
	1) File > Import > General > Preferences
	2) export한 .epf 파일을 찾고 Finish

이클립스 설정 확인

1. 인코딩 확인
	- Window > Preferences > encoding 검색 > UTF-8인지 확인
		1) workspace
		2) css
		3) html
		4) jsp
		5) xml(기본설정)

2. 톰캣 설정 확인
	- Server > Runtime Environments > Apache Tomcat v9.0 확인
	- 서버 설정 하는법
		- Add > Apache Tomcat v9.0 선택 후 next > Browse > 톰캣 파일 선택 > Finish

3. Dynamic Web Project 생성

2024년 9월 13일

프로젝트 관리 프로그램
- 학생들
- 학생A > 공고 + 주제 + 기술
	학생기타 > 입찰
- 팀
	- 일정 + 업무 분장 + 산출물 > 시스템

일반인 사용하는 프로그램(X) 
	ex. 인스타, 네이버 카페
전문가/직장인이 사용하는 프로그램 (O)
	ex. 회계사 사용하는 프로그램(용어복잡, 프로세스어렵)
- 데이터 양 + 종류가 달라짐
잘만든프로그램 똑같이 따라하는것 x
허접해도 본인의 생각이 들어가는 프로젝트가 좋다

프로젝트에 대한 메뉴얼이 아니라 
내가 개발

프로젝트 시 트러블이 생기고 그 트러블의 해결법, 왜 그해결법을 사용했는지에 대한 내용을 담아라
기술설명따로 구현한것 따로가 아니라 녹여내라

가계부를 사용했을떄 돈이 절약된다고했을때
기존의 가계부보다 어떤 점이 좋은지 근거자료 필요

클라이언트 기능을 보여주는 것보단 관리자 기능을 보여주는것도 좋음
ppt의 반정도는 고민의 흔적, 회의, 아이디어를 보여주자

*** 개발환경 & 실행 환경
1. Eclipse Version(하)
	- Help > About Eclispe IDE
	- Version: 2022-06 (4.24.0)
2. JDK 11(중)
3. Apache Tomcat(중)
	- Tomcat 9.XXX
4. Oracle 11g XE
5. Chrome Browser


		

새프로젝트 생성
New > Dynamic Web Project
    > project name: "ServletTest"
    > context root: "servlet"
    > generate web.xml: 체크O

Tomcat Server Port Number
	- 8090


웹 페이지
1. 정적 페이지 > 요청할 때마다 소스의 변화가 없는 페이지
	ex) HTML 페이지
2. 동적 페이지 > 요청할 때마다 소스의 변화가 있는 페이지
	ex) 서버 페이지
	ex) 지메일 > 받은 편지함 페이지
		- 홍길동 접속 > 길동에게 온 편지 목록
		- 아무개 접속 > 무개에게 온 편지 목록
 

Servlet, 서블릿
- 웹 서버에서 자바를 사용한 프로그램을 동작시키는 기술
- 프로그램 역할 > 웹 페이지 생성
- 웹 서버측에서 동적으로 웹페이지를 만드는 기술


Servlet Class
- 바리스타(알바생)
- 클라이언트 요청에 따라 동적으로 웹 페이지를 생산하는 클래스

Servlet Container
- 서버측에서 Servlet을 실행할 수 있는 환경
- Servlet을 생성, 실행, 관리, 소멸... 모든 과정 관리하는 환경
- 대표 컨테이너 > 톰캣(Tomcat)


패키지 + 파일
- "com.test.servlet" > "Ex01.java"


동적 페이지 요청 절차(********************)
1. 클라이언트(Browser)가 생산 프로그램(Serlvet)에게 요청
2. 생산 프로그램은 요청에 맞는 페이지를 동적으로 생산
3. 생산된 페이지를 클라이언트 소비(열람)



Servlet Class 작성 규칙

1. 서블릿 클래스 선언 > 순수 자바 클래스(X), 서블릿 API 사용(O)
	a. javax.servlet.Servlet 인터페이스를 구현한다. > 복잡함. 고비용. 직접
	a. javax.servlet.http.HttpServlet 클래스를 상속받는다. > 단순함. 저비용
	 
2. doGet/doPost 메소드 선언
	- 둘 중 하나 선언 or 둘 다 선언
	- 클라이언트(브라우저)의 요청이 들어오면 자동으로 호출되는 메소드 > "주문"
	- 커피 만드는 작업 수행 == 페이지 만드는 작업 수행
	- 메소드 작성 규칙
		a. 매개 변수 작성
			1. javax.servlet.http.HttpServletRequest
			2. javax.servlet.http.HttpServletResponse
		b. 예외 미루기
			1. java.io.IOException
			2. javax.servlet.ServletException
			
3. 동적 HTML 페이지 작성
	- doGet/doPost 내부에서 HTML 문서를 작성하기 위한 자바 코드를 작성한다.(개발자)
	- HttpServletResponse 객체의 getWriter() 메소드 호출 > PrintWriter 객체 반환
	- PrintWriter 객체 == 페이지를 제작하는 도구
	- printXXX("태그 작성 or CSS or JavaScript"); > 동적으로 페이지 생성
	- 페이지 완성 > 브라우저에게 반환

4. 서블릿 호출
	- 순수 자바는 웹 기술이 아니다. > 브라우저를 통해서 자바 프로그램을 호출할 수 없다.
	- 톰캣이 그 요청을 대신 받아서 자바 프로그램을 호출한다. > 톰캣(Servlet Container)
	- 자바 프로그램을 호출하기 위한 가상 주소를 생성
	- webapp > WEB-INF > web.xml(톰캣 환경 설정 파일)
	


- com.test.servlet > "Ex02.java"
- com.test.servlet > "Ex03.java"

- com.test.servlet > "Ex04_Send.java" > 사용자 데이터 입력 
- com.test.servlet > "Ex04_Receive.java" > 데이터 수신

서블릿 수업 끝~

Servlet > JSP(=Servlet) > Servlet + JSP(서로의 단점을 보완해줌)


새프로젝트 생성
New > Dynamic Web Project
    > project name: "JSPTest"
    > context root: "jsp"
    > generate web.xml: 체크O

Hello
- webapp > "ex01.jsp"

Servlet
- 자바 기반(클래스)
- HTML 구문 > 문자열 조작
- 장점: 자바 코드 작성 원할
- 단점: 클라이언트(HTML, CSS, JavaScript) 코드 작성 곤란

JSP
- HTML 기반
- 자바 구문 > 일부 영역 제공(<% %>)
- 장점: HTML 코드 작성 원할
- 단점: 자바 코드 작성 약간 불편
  
   
JSP 구성 요소 > 자바 요소

1. JSP 지시자, JSP Directive
	- <%@ %>
	- page 지시자
	- include 지시자
	- taglib 지시자
   
2. 스크립트 요소, Scripting Elements
	- <% %>
	- 스크립틀릿
	- 익스프레션
	- 선언부

3. 액션 태그, Action Tag
	- <jsp:XXX> or <c:XXX>
	- 기본 액션 태그
	- 확장 액션 태그
	- 사용자 정의 액션 태그
   
Servlet > Tomcat > Servlet Container
- 톰캣이 서블릿을 통제
- 모든 탄생부터 소멸까지 관리
- 물론 서블릿 컨테이너 중에 톰캣이 아닌 것도 있지만 대다수가 톰캣

JSP > Tomcat > JSP Container
- 톰캣이 JSP를 통제 
   
page 지시자
- webapp > "ex02.jsp"
- JSP 페이지 실행 환경 > 톰캣에게 알려주는 내용
- JSP 페이지 상단에 기술
- 1개 이상 작성 가능~

- <%@ page 
	language="java"  
	contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"
    %>
    a. language="java"
    	- JSP 페이지에서 사용할 프로그래밍 언어 지정
    
    b. contentType="text/html; charset=UTF-8"
    	- JSP 페이지의 콘텐츠에 대한 기술
    	- text/html: MIME 타입 > HTML 페이지 > 브라우저에게 전달
    	- charset=UTF-8: 인코딩> HTML 페이지 > 브라우저에게 전달
    
    c. pageEncoding="UTF-8"
    	- 현재 JSP 페이지의 인코딩 > 톰캣에게 전달
    	- 보통 contentType과 동일한 encoding 사용
    	
include 지시자
- webapp > "ex03.jsp" > 일반 페이지
- webapp > "inc" > "copyright.jsp" > 조각 페이지
	> 성질이 다르기 때문에 다른 폴더에 만듦
	> 딱 집어 넣을 코드만 집어넣어야함
- 서버에서 서블릿이 톰캣이 합쳐진 코드를 제공하기 때문에 브라우저는 어디서부터 어디까지 합쳐진 페이지인지 구분하지 못함
   

스크립트 요소 > 스크립틀릿
- <% %>
- Script + Applet(cf. activeX) - 브라우저에서는 프로그래밍 언어를 javascript 밖에 사용할 수 없는데 javascript는 제한된 환경에서만 사용 가능한 언어라서 따로 만든 프로그램
- HTML 영역에서 Java 문법을 사용 가능하게 하는 영역을 제공

스크립트 요소 > 익스프레션, 표현식
- <%= %>
- 자바의 값(데이터)을 HTML 문서(***)에 출력하는 역할
- 브라우저 화면에 출력하는게 아니다.(***)
- System.out.println() 역할

스크립트 요소 >  선언부
- <%! %>
- 멤버를 선언하는 역할

JSP 작동 원리
- 그림 참조

jsp 해석 과정
톰캣이 jsp 파일을 달라고 요청을 받음
톰캣은 java 코드를 이해가능 클라이언트 코드는 모름
처음 해석 > 스크립틀릿 안에 있는 것은 해석하고 모르는 코드는 브라우저 한테 넘김, 엔터나 공백 같은 것도 포함, 익스프레션은 브라우저에게 반환함
이렇게 만든 임시페이지를 브라우저에 넘김

톰캣의 옛날이름 : 카탈리나(Catalina)
workspace\.metadata\.plugins\org.eclipse.wst.server.core\tmp0\work\Catalina\localhost 
workspace\.metadata\.plugins\org.eclipse.wst.server.core\tmp0\work\Catalina\localhost\jsp\org\apache\jsp
jsp를 자기만의 규칙으로 컴파일 해놓은 java가 있음

doGet, doPost가 호출되기 전에 service함수가 먼저 실행됨 > java코드를 확인하면 jspService 함수에 서블릿 과정이 담겨져 있음

jsp - servlet 기술을 좀더 편하게 사용할 수 있도록 도와주는 기술

JSP 내장 객체, JSP Implicit Object
- 개발자가 직접 생성하지 않아도, 톰캣이 미리 만들어서 제공하는 객체
- JSP > 예약어로 제공한다. > 편의상 예약어라고 하지만 실제로는 서블릿의 메소드 매개변수이다.
- Servlet > 매개변수로 제공한다.

- request, response, session, pageContext
- out, application
- config, page, exception

*** pageContext, request, session, application
	- 공통점: 객체 내부에 사용자 데이터를 저장할 수 있는 컬렉션(Map)을 가진다.
	- void setAttribute(String key, Object value)
	- Object getAttribute(String key)

request
- HttpServletRequest 클래스
- 서블릿의 doGet/doPost/_jspService 메소드의 첫번째 매개변수
- 주로 클라이언트측에서 서버측으로 발생하는 모든 업무를 담당한다.

1. 클라이언트에서 서버로 보낸 데이터를 가져오기
	- "ex08_form.jsp" : 사용자 입력을 받는 페이지(Ex03_Send.java)
	- "ex08_ok.jsp" : 전송도니 데이터를 수신하는 페이지(Ex03_Receive.java)

	- "ex09_form.jsp"
	- "ex09_ok.jsp"

	- "ex10_form.jsp"
	- "ex10_ok.jsp"

	- "ex11_form.jsp"
	- "ex11_ok.jsp"


2. 클라이언트에서 서버로 보낸 데이터의 인코딩 처리
3. 클라이언트에서 서버로 보낼 때 여러가지 정보를 가져오기
	- "ex12_request.jsp"

response
- HttpServletResponse 클래스
- 서블릿의 doGet/doPost/_jspService 메소드의 두번째 매개변수
- 주로 서버측에서 클라이언트측으로 발생하는 모든 업무를 담당한다.

1. 돌려줄 HTML 페이지 제작
	- response.getWriter() > PrintWriter > HTML 제작
	- 서블릿 > 사용O
	- JSP > 암시적 사용O

2. 돌려줄 HTML 페이지 인코딩 설정
	- response.setCharacterEncoding("UTF-8");
	- 서블릿 > 사용O
	- JSP > contentType="text/html; charset=UTF-8" 으로 설정해줌 > contentType="charset=UTF-8" > page 지시자에 들어가 있음

3. 돌려줄 HTML 페이지 MIME 설정
	- contentType="text/html;"
	- 파일 업로드 수업 때

4. 페이지 이동하기
	- "ex13_response_1.jsp"
	- "ex13_response_2.jsp"

pageContext
	- "ex14_pagecontext_1.jsp"
	- "ex14_pagecontext_2.jsp"

out
- 출력 객체
- JSP 방식이 아닌 Servlet 방식으로 출력을 지원하는 객체
- "ex15_out.jsp"

session & application
- session > 개인 정보 관리 객체
- application > 사이트 정보 관리 객체

- "ex16_session.jsp"
- "ex16_session_2.jsp"
- "ex16_session_3.jsp"

- "ex17_session.jsp"

- "ex18_session.jsp"	// 메인페이지
- "ex18_set.jsp"		// ↓기능 페이지들
- "ex18_del.jsp"
- "ex18_interval.jsp"
- "ex18_reset.jsp"

단일 파일 업로드/다운로드

- "ex19_form.jsp"
- "ex19_ok.jsp"

다중 파일 업로드/다운로드

- "ex20_form.jsp"
- "ex20_ok.jsp"

cos.jar 다운로드
원래 jar파일을 프로젝트에 참조하려면 Java Build Path를 설정해주어야하는데
webapp > WEB-INF > lib 폴더에 jar 파일을 넣으면 자동으로 설정해준다. 

2024년 9월 23일

EL, Expression Language
- ex23_el.jsp
- JSP(자바)의 표현식(<%= %>) > HTML 문서에 값을 출력하는 역할
- JSP 페이지 내에서 JAVA 문법을 사용하지 말자
- <%= %>을 대신하는 언어 > EL(*****) = 가독성 + 편의성

JSTL, JSP Standard Tag Library
- 액션 태그
- 자바의 프로그래밍 구문을 태그 형태로 제공
- JSP 페이지 내에서 JAVA 문법을 사용하지 말자
- <% %>을 대신(X) > <% %> 일부 구문 대신(O)
- ex24_jstl.jsp
- jstl은 기본 기능이 아니라서 jar를 가져와야한다

∴현재 JSP 안에서는 <%= %>, 스크립틀릿을 안씀

jstl 설치
- https://apache.org/ > 공식 홈페이지이지만 우리가 생각하는 jstl과 다르므로 공식홈에서 다운로드 X
- https://mvnrepository.com/search?q=jstl 에서 javax.servlet » jstl > 1.2버전
- webapp > WEB-INF > lib > jstl-1.2.jar 복사

jstl 사용법
- jar 파일 가져오기 + 태그라이브러리 설정

application 
- "ex25_application.jsp"

쿠키, Cookie
- 브라우저 기능 중 하나 > 데이터 저장소
- JavaScript or Java로 조작 가능
- 용도: 사용자(브라우저)가 웹 사이트 방문 
	> 웹 사이트 측에서 접속한 사용자에 대한 개인 정보를 저장하기 위한 장치 > 사용자의 컴퓨터에 저장한다.(***)
	> 사용자에 대한 여러가지 정보들을 지속적으로 유지/관리 or 행동 추적 등..

사이트 > 사용자 정보 관리
1. DB
	- 가장 좋음
	- 무겁고 비싸다
======================== 비교대상은 아님
2. session
	- 서버 메모리에 생성
	- 자바 > 저장 가능한 자료형 > Object(모든 것)
	- 보안 양호
	- 크기 무제한(서버 메모리 허용량)
	- 모든 페이지에서 접근 가능(= 전역 변수 역할)

3. cookie
	- 클라이언트 메모리 or 하드 디스크에 생성
	- 텍스트 파일 > 저장 가능한 자료형 > 문자열
	- 보안 불안정
	- 4KB, 최대 20개
	- 모든 페이지에서 접근 가능(= 전역 변수 역할)

- "ex26_cookie.jsp"
- "ex26_cookie_2.jsp"

- "ex27_cookie.jsp"
- "ex27_cookie_2.jsp"
- "ex27_cookie_3.jsp"

- "ex28_cookie_form.jsp"
- "ex28_cookie_ok.jsp"

새프로젝트
- "MVCTest" > "mvc" + web.xml(O)

1. Servlet
2. JSP  > JSP Model 1
	- 상단부: 자바코드
	- 중하단부: HTML코드
3. Servlet + JSP > JSP Model 2
	- Servlet: 자바코드
	- JSP: HTML코드

Hello
- "com.test.java" > "Hello.java"
- webapp > "hello.jsp"

서블릿 + JSP = 업무 순서: 서블릿 > JSP = 1페이지
