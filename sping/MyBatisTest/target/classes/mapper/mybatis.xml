<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 매퍼 파일 > SQL을 작성하는 역할 -->

<!-- <mapper namespace="업무에 맞게 적고 보통 파일명을 적음"> -->
<mapper namespace="mybatis">
	<!-- 
	<select id="">select * from tblAddress</select>
	<insert id="">insert into tblAddress</insert>
	<update id=""></update>
	<delete id=""></delete>
	 -->
	<select id="time" resultType="String">select sysdate from dual</select>
	
	<insert id="m1">
		insert into tblAddress values (seqAddress.nextVal, '북극곰', 10, '북극', 'f')
	</insert>
	
	<delete id="m2" parameterType="String">
		<!-- 
			delete from tblAddress where seq = #{키워드}	
			> 값이 여러개면 구분을 해야하고 한개라면 아무거나 적으면 되지만 보통 변수명을 적는다
		 -->
		delete from tblAddress where seq = #{seq}
	</delete>
	
	<update id="m3" parameterType="com.test.mybatis.dto.AddressDTO">
		update tblAddress 
			set age = #{age}, address = #{address}, gender = #{gender} 
			where seq = #{seq}
	</update>
	
	<!-- SQL 태그 > 매개변수 타입(parameterType) 표시 or 반환값 타입(resultType) 표시 -->
	<select id="m4" resultType="Integer">
		select count(*) from tblAddress
	</select>
	
	<!--
		***** 식별자 규칙 > getter & setter
		1. DB Column Name > age number(3) not null
		2. <input type="text" name="age">
		3. DTO 멤버변수 > private int age
		- 위 세가지를 맞추면 알아서 매핑해줌
	 
		1. select name
		2. dto.setName()
		
		컬럼명과 model의 getter/setter뒤의 이름(lombok 이용 시 멤버 변수명)이 같아야함	
	 -->
	<select id="m5" parameterType="Integer" resultType="com.test.mybatis.dto.AddressDTO">
		select * from tblAddress where seq = #{seq}
	</select>
	
	<!-- 
		select의 반환값
		- 레코드의 개수와 상관없이 레코드 1개를 담을 수 있는 자료형을 명시한다.
	 -->
	<select id="m6" resultType="String">
		select name from tblAddress
	</select>
	
	<select id="m7" resultType="com.test.mybatis.dto.AddressDTO">
		select * from tblAddress
	</select>
	
	<!-- 
		#{name}: 데이터 바인딩. SQL 상에서 사용할 데이터를 추가
		${name}: 키워드(식별자) 바인딩. 자료형 구분(X) > 무조건 추가 
			> 컬럼명 or 테이블명 전달용
	 -->
	
	<select id="m8" parameterType="String" resultType="Integer">
		<!-- 1. select count(*) from 'tblAddress'  -->
		<!-- select count(*) from #{table} -->
		select count(*) from ${table}
		<!-- 
			where subject = '검색어'
			where content = '검색어'
			where name = '검색어'
			> where ${subject} = #{word}
		 -->
	</select>
	
	<!-- 
		parameterType: 생략 가능
		resultType: 생략 불가능
	 -->
	<!-- <select id="m9" parameterType="Integer" resultType="com.test.mybatis.dto.AddressDTO"> -->
	<select id="m9" parameterType="Integer" resultType="dto">
		<!-- 
			org.xml.sax.SAXParseException - xml 구문오류
		 -->
		<!-- <, > - 태그로 인식해서 에러남 -->
		<!-- select * from tblAddress where age < #{age} -->
		<!-- select * from tblAddress where age &lt; #{age} -->
		<!-- 
			PCDATA: 파싱을 함, 문법검사를 함 
			<-> 
			CDATA: 파싱을 안함, 문법검사를 안함
		
			CDATA 섹션
		 -->
		select * from tblAddress
			<![CDATA[
				where age < #{age}
			]]>
	</select>
	
	<select id="m10" resultType="dto">
		select * from tblAddress 
			<!-- 만든 목적에 따라 사용하는게 좋으므로 비권장 -->
			<!-- where address like '%${word}%' -->
			where address like '%' || #{word} || '%'
	</select>
	
	<select id="m11" resultType="dto">
		<!-- 
			매개변수로 문자열이 1개 넘어왔을때 주의!!!
			1. test="gender == 'm'.toString()"
			2. test='gender == "f"'
			- 둘 중 하나로 처리
		 -->
	
		<if test="gender == 'm'.toString()">
			select * from tblAddress
				where gender = 'm'
		</if>
		<if test='gender == "f"'>
			select * from tblAddress
				where gender = 'f'
		</if>
		<if test="gender == null">
			select * from tblAddress
		</if>
	</select>
	
	<select id="m12" resultType="dto">
		select * from tblAddress
			<if test="gender != null">
				where gender = #{gender}
			</if>
	</select>
	
	<!-- <select id="m13" parameterType="java.util.HashMap" resultType="dto"> -->
	<!-- 
		<select id="m13" parameterType="map" resultType="dto">	
		> map: HashMap에 미리 정해진 alias
	 -->
	<select id="m13" resultType="dto">
		<!-- 
		<if test="gender == null and word == null">
			select * from tblAddress
		</if>
		<if test="gender != null and word == null">
			select * from tblAddress
				where gender = #{gender}
		</if>
		<if test="gender == null and word != null">
			select * from tblAddress
				where address like '%' || #{word} || '%'
		</if>
		<if test="gender != null and word != null">
			select * from tblAddress
				where gender = #{gender} and address like '%' || #{word} || '%'
		</if>
		 -->
		 
		<!-- 
		select * from tblAddress
			<if test="gender != null or word != null">
				where
			</if>
			<if test="gender != null">
				gender = #{gender}
			</if>
			<if test="gender != null and word != null">
				and
			</if>
			<if test="word != null">
				address like '%' || #{word} || '%'
			</if>
		 -->
		
		<!-- 
			and나 where을 위해 추가로 조건을 끼워 넣으면 
			코드가 복잡해지므로 무조건 참이되는 값을 집어넣음
		 -->	
		<!-- 
		select * from tblAddress
			where			
				1 = 1
			<if test="gender != null">
				and gender = #{gender}
			</if>
			<if test="word != null">
				and address like '%' || #{word} || '%'
			</if>
		 -->
		select * from tblAddress
			<where>
			<!-- 
				하나라도 존재하면 where 생성
				조건이 하나일 때 무난하게 사용 가능
				조건이 여러개라면 연산자를 붙여야 하기 때문에 부적합
			 -->
				<if test="gender != null">
					gender = #{gender}
				</if>
				<if test="word != null">
					address like '%' || #{word} || '%'
				</if>
			</where>
	</select>
	
	<insert id="m14" parameterType="dto">
		<!-- 
			seqence 객체가 있을 때만 사용할 수 있는 방법
			resultType > 자바에 전달할 값
			parameterType의 dto의 멤버변수와 keyProperty에 같은 이름을 가진다면 dto에 넣어서 돌려줌
		 -->
		<selectKey keyProperty="seq" order="BEFORE" resultType="String">
			select seqAddress.nextVal from dual
		</selectKey>
	
		<!-- insert into tblAddress values (seqAddress.nextVal, #{name}, #{age}, #{address}, #{gender}) -->
		insert into tblAddress values (#{seq}, #{name}, #{age}, #{address}, #{gender})
	</insert>
	
	<select id="m15" resultType="dto">
		<!-- where name in ('강아지', '사자') -->
		select * from tblAddress
			<where>
				<!-- 이름과 상관 없음 / collection="컬렉션 종류" -->
				<foreach collection="list" item="item" open="name in (" close=")" separator=",">
					#{item}
				</foreach>
			</where>
	</select>
</mapper>