spring:
  application:
    name: boot-oauth2

  datasource:
    driver-class-name: oracle.jdbc.OracleDriver
    url: jdbc:oracle:thin:@localhost:1521/xe
    username: springboot
    password: java1234
  
  thymeleaf:
    cache: false
  # JPA 설정
  jpa:
    database: oracle
    generate-ddl: false
    hibernate:
      ddl-auto: none
#     원래 sql 네이밍 규칙에 맞게 스네이크 표기법으로 생성해주는데
#     네이밍을 개발자가 원하는대로 지어주기 위해서 추가해주는 설정
      naming:
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
    show-sql: true  # 자동 생성된 SQL을 로그에 출력
    properties:
      hibernate:
        format-sql: true # SQL을 이쁘게A
  security:
    oauth2:
      client:
        registration: 
          naver:
            client-name: naver
            client-id: 
            client-secret: 
            redirect-uri: http://localhost:8090/login/oauth2/code/naver
            authorization-grant-type: authorization_code
            scope: name, email

          google:
            client-name: google
            client-id: 
            client-secret: 
            redirect-uri: http://localhost:8090/login/oauth2/code/google
            authorization-grant-type: authorization_code
            scope: profile, email

        provider:
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response

#          google: 세계적인 기업의 정보는 oauth에 이미 설정이 되어있음, google도 마찬가지
          
server:
  port: 8090