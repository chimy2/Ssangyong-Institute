JDK 버전 변경
- JDK 11, 8 		> Spring Legacy Project(최대 지원 버전이 JDK 11임)
			> Spring Boot 2.X
- JDK 17, 21, 23	> Spring Boot 3.X(2022 11월) > 보통 최신기술은 실무에 잘 사용하지 않지만 이 기술은 많이 사용

JDK 17 설치
- dev or 기본 폴더

환경변수 
- 여러 버전의 JDK 존재 > 딱 1버전만 JDK(기본값) 설정 가능 > JAVA_HOME 환경 변수
JAVA_HOME > C:\class\dev\jdk-17
Path > %JAVA_HOME%\bin

사용도구 > https://spring.io/tools

sts 툴 설치후 jdk에서 바꾸는 방법
1. SpringToolSuite4.ini에서 바꾸기
2. 프로그램 옵션에서 바꾸기

1. SpringToolSuite4.ini에서 바꾸기
C:\class\dev\jdk-17\bin\javaw.exe

롬복 설치
롬복이 설치된 경로에서 프롬프트를 열고
java.exe -jar lombok.jar 명령어 실행 후 sts가 설치된 경로로 가서 sts.exe 파일로 경로 지정 후 설치

STS 4.26 버전이 java 21 버전 부터 지원하므로 JDK21 재설치
환경변수 다시 바꿔 주고 자바 버전이 바르게 나오는지 터미널에서 확인
java --version > java 21.0.5 2024-10-15 LTS
javac --version > javac 21.0.5

sts 워크스페이스 선택 후 실행
window defender 무시

Preferences > Color and Fonts 바꾸기 - 기본적 encoding이 UTF-8로 설정되어 있으므로 따로 설정이 필요없음

Spring Boot 프로젝트 만드는 방법
1. 개발 툴(Spring Initializr)
2. Spring Initializr

1. New > Spring Starter Project
- name : project name
- Group : 기본 패키지명 ex. com.test
- artifact : project명과 보통 일치시킴
- package : 패키지 ex. com.test.projectname

기존 스프링이나 jsp 프로젝트는 톰캣을 통해서 모든 것이 관리 됐다면
스프링 부트는 자바 프로그램을 실행해서 관리

실행 방법
1. Boot Dashboard 에서 실행
2. 단축키(ctrl + f11)로 실행
3. 프로젝트 우클릭 후 Run as > Spring Boot App (사이트로서 실행)

1. 새프로젝트 : boot-begin
- 의존성 추가
	- Spring Web

스프링 부트 애플리케이션
- com.test.begin > BootBeginApplication.java
			> 프로젝트명 + Application

여러가지 자원
- src/main/resources
	- static
		- 정적 자원들(HTML, CSS, JavaScript, 이미지 등..)
		- http://localhost:8090/
	- templates
		- 이전의 views 폴더 역할
		- JSP 같은 뷰 페이지를 담는 역할
	- application.properties
		- 스프링 설정 + 자바 설정
		- application.properties
		- application.yaml or application.yml

- src/test/java
	- 기존의 단위 테스트와 동일
	- @SpringBootTest

- build.gradle
	- Gradle 빌드 도구 설정 파일
	- pom.xml와 유사한 역할

샘플 파일
- "com.test.bootbegin.controller" > "TestController.java"

1. boot-begin
2. boot-jsp > 추천(X)
3. boot-mybatis
------------------ 내용 많음↓
4. > 2. boot-thymeleaf
5. > 3. boot-jpa
6. spring boot security

Spring Boot + JSP

프로젝트 생성
- Name: "boot-jsp"
- Type: Gradle(Groovy)
- Packaging: Jar
- Java Version: 21
- Language: Java
- Group: "com.test"
- Artifact: "boot-jsp"
- Package: "com.test.jsp"
- Dependencies: 
	- Spring Web
	- Lombok
- Finish

JSP 설정하기 > Spring은 기본적으로 JSP를 모름
- 톰캣 : 아파치와 sun microsystems에서 공동 프로젝트에 의해 만든 대표적인 JSP/서블릿 컨테이너
- jsp를 기본적으로 제공해주지 않는 이유 ? 톰캣의존성을 줄이기 위해 java 기술인 thymeleaf 사용하게 됨
- build.gradle
	- 의존성 정의
		a. compileOnly > 컴파일시에만 사용. 빌드 시 jar에 포함하지 말것.  > 실행 파일 용량 줄이기
		b. runtimeOnly > 런타임시에만 사용. 컴파일 때는 사용 안함. 코드 작성 시 참조 불가능
		c. annotationProcessor > 어노테이션 프로세서에서 사용하는 라이브러리
		d. implementation > 컴파일 + 런타임 때 사용
		e. testCompileOnly > 테스트 코드를 컴파일 때만 사용
		f. testRuntimeOnly > 테스트 코드를 런타임 때만 사용
		g. testImplementation > 테스트 코드를 컴파일 + 런타임 사용
		h. developmentOnly > 개발할 때만 사용 + 배포 시 제외

- application.yml
	- JSP 설정 추가
	
- 파일 생성
	- "com.test.jsp.controller" > "TestController.java"
 	- "com.test.jsp.dto" > "TestDTO.java" 
	- src/main/webapp/WEB-INF/views > "test.jsp"
	- static > "test.html"

기존 방식(Servlet/JSP, Spring)
- 외부 톰캣을 사용
- Hot Deployment 사용 > 소스 반영

현재 방식(Spring Boot)
- 내부 톰캣을 사용
- Spring DevTools 의존성 사용 > Hot Deployment 유사 동작, 완벽하지 않아서 서버를 재시작해야 할 일이 많음

- http://localhost:8090/test.do?name=홍길동&age=20
- http://localhost:8090/test.html

Spring DevTools 미사용
1. Java 코드 변경
	- 자동 반영 안됨.(기다려도 안됨)
	- 부트 애플리케이션(서버)을 재시작(대시보드로)
2. JSP 코드 변경
	- 자동 반영 안됨.(기다려도 안됨)
	- 부트 애플리케이션(서버)을 재시작(대시보드로)
3. 정적 자원 코드 변경
	- 자동 반영 됨(툴마다 다름)




 