2024년 11월 12일

JDK 버전 변경
- JDK 11, 8 		> Spring Legacy Project(최대 지원 버전이 JDK 11임)
			> Spring Boot 2.X
- JDK 17, 21, 23	> Spring Boot 3.X(2022 11월) > 보통 최신기술은 실무에 잘 사용하지 않지만 이 기술은 많이 사용

JDK 17 설치
- dev or 기본 폴더

환경변수 
- 여러 버전의 JDK 존재 > 딱 1버전만 JDK(기본값) 설정 가능 > JAVA_HOME 환경 변수
JAVA_HOME > C:\class\dev\jdk-17
Path > %JAVA_HOME%\bin

사용도구 > https://spring.io/tools

sts 툴 설치후 jdk에서 바꾸는 방법
1. SpringToolSuite4.ini에서 바꾸기
2. 프로그램 옵션에서 바꾸기

1. SpringToolSuite4.ini에서 바꾸기
C:\class\dev\jdk-17\bin\javaw.exe

롬복 설치
롬복이 설치된 경로에서 프롬프트를 열고
java.exe -jar lombok.jar 명령어 실행 후 sts가 설치된 경로로 가서 sts.exe 파일로 경로 지정 후 설치

STS 4.26 버전이 java 21 버전 부터 지원하므로 JDK21 재설치
환경변수 다시 바꿔 주고 자바 버전이 바르게 나오는지 터미널에서 확인
java --version > java 21.0.5 2024-10-15 LTS
javac --version > javac 21.0.5

sts 워크스페이스 선택 후 실행
window defender 무시

Preferences > Color and Fonts 바꾸기 - 기본적 encoding이 UTF-8로 설정되어 있으므로 따로 설정이 필요없음

Spring Boot 프로젝트 만드는 방법
1. 개발 툴(Spring Initializr)
2. Spring Initializr

1. New > Spring Starter Project
- name : project name
- Group : 기본 패키지명 ex. com.test
- artifact : project명과 보통 일치시킴
- package : 패키지 ex. com.test.projectname

기존 스프링이나 jsp 프로젝트는 톰캣을 통해서 모든 것이 관리 됐다면
스프링 부트는 자바 프로그램을 실행해서 관리

실행 방법
1. Boot Dashboard 에서 실행
2. 단축키(ctrl + f11)로 실행
3. 프로젝트 우클릭 후 Run as > Spring Boot App (사이트로서 실행)

1. 새프로젝트 : boot-begin
- 의존성 추가
	- Spring Web

스프링 부트 애플리케이션
- com.test.begin > BootBeginApplication.java
			> 프로젝트명 + Application

여러가지 자원
- src/main/resources
	- static
		- 정적 자원들(HTML, CSS, JavaScript, 이미지 등..)
		- http://localhost:8090/
	- templates
		- 이전의 views 폴더 역할
		- JSP 같은 뷰 페이지를 담는 역할
	- application.properties
		- 스프링 설정 + 자바 설정
		- application.properties
		- application.yaml or application.yml

- src/test/java
	- 기존의 단위 테스트와 동일
	- @SpringBootTest

- build.gradle
	- Gradle 빌드 도구 설정 파일
	- pom.xml와 유사한 역할

샘플 파일
- "com.test.bootbegin.controller" > "TestController.java"

1. boot-begin
2. boot-jsp > 추천(X)
3. boot-mybatis
------------------ 내용 많음↓
4. > 2. boot-thymeleaf
5. > 3. boot-jpa
6. spring boot security

Spring Boot + JSP

프로젝트 생성
- Name: "boot-jsp"
- Type: Gradle(Groovy)
- Packaging: Jar
- Java Version: 21
- Language: Java
- Group: "com.test"
- Artifact: "boot-jsp"
- Package: "com.test.jsp"
- Dependencies: 
	- Spring Web
	- Lombok
- Finish

JSP 설정하기 > Spring은 기본적으로 JSP를 모름
- 톰캣 : 아파치와 sun microsystems에서 공동 프로젝트에 의해 만든 대표적인 JSP/서블릿 컨테이너
- jsp를 기본적으로 제공해주지 않는 이유 ? 톰캣의존성을 줄이기 위해 java 기술인 thymeleaf 사용하게 됨
- build.gradle
	- 의존성 정의
		a. compileOnly > 컴파일시에만 사용. 빌드 시 jar에 포함하지 말것.  > 실행 파일 용량 줄이기
		b. runtimeOnly > 런타임시에만 사용. 컴파일 때는 사용 안함. 코드 작성 시 참조 불가능
		c. annotationProcessor > 어노테이션 프로세서에서 사용하는 라이브러리
		d. implementation > 컴파일 + 런타임 때 사용
		e. testCompileOnly > 테스트 코드를 컴파일 때만 사용
		f. testRuntimeOnly > 테스트 코드를 런타임 때만 사용
		g. testImplementation > 테스트 코드를 컴파일 + 런타임 사용
		h. developmentOnly > 개발할 때만 사용 + 배포 시 제외

- application.yml
	- JSP 설정 추가
	
- 파일 생성
	- "com.test.jsp.controller" > "TestController.java"
 	- "com.test.jsp.dto" > "TestDTO.java" 
	- src/main/webapp/WEB-INF/views > "test.jsp"
	- static > "test.html"

기존 방식(Servlet/JSP, Spring)
- 외부 톰캣을 사용
- Hot Deployment 사용 > 소스 반영

현재 방식(Spring Boot)
- 내부 톰캣을 사용
- Spring DevTools 의존성 사용 > Hot Deployment 유사 동작, 완벽하지 않아서 서버를 재시작해야 할 일이 많음

- http://localhost:8090/test.do?name=홍길동&age=20
- http://localhost:8090/test.html

Spring DevTools 미사용
1. Java 코드 변경
	- 자동 반영 안됨.(기다려도 안됨)
	- 부트 애플리케이션(서버)을 재시작(대시보드로)
2. JSP 코드 변경
	- 자동 반영 안됨.(기다려도 안됨)
	- 부트 애플리케이션(서버)을 재시작(대시보드로)
3. 정적 자원 코드 변경
	- 자동 반영 됨(툴마다 다름)

Spring DevTools 사용
1. Java 코드 변경
	- 자동 반영 됨
2. JSP 코드 변경
	- 자동 반영 됨
3. 정적 자원 코드 변경
	- 자동 반영 됨

스프링 부트, Spring Boot
- 스프링 부트는 자바 기반의 웹 애플리케이션과 마이크로서비스를 빠르고 쉽게 만들 수 있는 프레임워크이다.

스프링 부트 특징
1. 자동 구성(Auto Configuration): 프로젝트에 필요한 의존성 or 설정을 자동으로 구성한다.
2. 독립 실행형 애플리케이션: 내장 서버를 포함해서 별도의 외부 환경 설치없이 실행 가능
3. 스프링 스타터: 미리 구성된 의존성 세트로 제공
4. 복잡한 XML 설정 불필요
	- application.yml
	- 기존.xml > Java 설정으로 교체
5. 보일러플레이트 코드 최소화
6. 내장 서버 지원 > Tomcat, Jetty, Undertow 등 > 제우스

스프링 설정 방식
1. xml 방식
2. 어노테이션 방식
3. 자바 방식

1,2 > 기존 방식
2,3 > 부트 방식

서버 아키텍처의 종류 
1. 모놀리식 아키텍처(Monolithic)
	- 하나의 애플리케이션으로 모든 기능을 개발
	- 초기 개발 빠름
	- 배포가 쉽다
	- 유지 보수가 어렵다
	- 기능 변화에 대응 힘듦
	- 기술 스택 선택의 자유도가 낮다
	- 부분 장애 > 전체 장애

2. 마이크로서비스 아키텍처(MSA)
	- 작은 독립적인 서비스를 각각 구현한 뒤 서로 API를 통해서 통신하도록 구성
	- 초기 개발 비용 필요
	- 배포가 힘들다
	- 유지 보수가 쉽다
	- 기능 변화에 유연
	- 기술 스택 선택의 자유도가 높다
	- 부분 장애 > 여파 적음

Spring Boot + MyBatis

프로젝트 생성
- Name: "boot-mybatis"
- Type: Gradle(Groovy)
- Packaging: Jar
- Java Version: 21
- Language: Java
- Group: "com.test"
- Artifact: "boot-mybatis"
- Package: "com.test.mybatis"
- Dependencies: 
	- Spring Web
	- Lombok
	- Spring DevTools
	- Oracle Driver(JDBC)
	- MyBatis Framework
- Finish

 JSP 설정
- build.gradle
	- 의존성 추가

	//JSP
	implementation 'org.apache.tomcat.embed:tomcat-embed-jasper'
	implementation 'jakarta.servlet:jakarta.servlet-api'
	implementation 'jakarta.servlet.jsp.jstl:jakarta.servlet.jsp.jstl-api'
	implementation 'org.glassfish.web:jakarta.servlet.jsp.jstl'
	
	//Lombok 테스트 환경
	testImplementation 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'

JDBC 설정
- application.yml
  datasource:
    driver-class-name: oracle.jdbc.OracleDriver
    url: jdbc:oracle:thin:@localhost:1521/xe
    username: springboot
    password: java1234

2024년 11월 13일

spring boot 계정 생성 

tblAddress 생성 + 데이터 추가(50명)

스프링 부트 > HikariCP(기본적 사용)

DB 관련 단위 테스트
- src/test/java > com.test.mybatis > "DatasourceTest.java"
- src/test/java > com.test.mybatis > "MapperTest.java"

MyBatis 관련 작업
- "com.test.mybatis.mapper" > "AddressMapper.java"(I)
- src/main/resources > "com" > "test" > "mybatis" > "mapper" > "AddressMapper.xml"

업무 페이지
- tblAddress > list.do
- "com.tset.mybatis.controller" > "AddresssController.jaa"
- "com.test.mybatis.service" > "AddressService.java"
- "com.tset.mybatis.domain" > "AddressDTO.java"

- views > "list.jsp"



Spring Boot + MyBatis + Thymeleaf

Spring Boot
- Thymeleaf, Mustache, Groovy, Freemarker, Velocity 등...

Thymeleaf
- 템플릿 엔진 > 뷰 페이지를 만든느 프로그램 or 환경
- 자바 웹 or 독립형 환경 > HTML, JavaScript, CSS등을 처리하는 서버 사이드 템플릿 엔진입니다.

프로젝트 생성 
- Name: "boot-thymeleaf" ***
- Type: Gradle(Groovy)
- Packaging: Jar
- Java Version: 21
- Language: Java
- Group: "com.test"
- Artifact: "boot-thymeleaf"
- Package: "com.test.thymeleaf"
- Dependencies: 
	- Spring Web
	- Lombok
	- Spring DevTools
	- Oracle Driver(JDBC)
	- MyBatis Framework
	- Thymeleaf
- Finish

들어가봐요 여기
https://www.thymeleaf.org/

설정
- application.yml
	- 데이터 소스 설정
	- 서버 포트 변경
	- 타임리프 캐시 비활성화

파일 생성
- "com.test.thymeleaf.controller" > "ThymeleafController.java"
- "com.test.thymeleaf.mapper" > "AddressMapper.java" (I)
- "com.test.thymeleaf.domain" > "AddressDTO.java"

- src/main/resources > templates > "result.html"

- src/main/resoucres/mapper > "AddressMapper.xml"


thymeleaf ecosystem eclipse 설치
- Thymeleaf Eclipse Plugin
- https://www.thymeleaf.org/ecosystem.html
- 사이트에 들어가서 installation의 주소를 이용
- Help > Install New Software > Add
	- Name: Thymeleaf
	- Location: https://www.thymeleaf.org/eclipse-plugin-update-site/
- 모두 동의하여 설치 후 재 실행 하면 STS에 th인텔리센스가 적용됨


2024년 11월 15일

프로젝트 생성 
- Name: "boot-jpa" ***
- Artifact: "boot-jpa"
- Package: "com.test.jpa"
- Dependencies: 
	- Spring Web
	- Lombok
	- Spring Boot DevTools
	- Oracle Driver(JDBC)
	- Thymeleaf
	- Spring Data JPA
- Finish

JPA, Java Persistence API
- Spring Boot JPA > (Spring) JPA - 시간 나면 순수 JPA도 공부해볼 것
- 자바 진영의 ORM 기술을 표준화
- JPA ? 객체와 관계형 데이터베이스를 매핑하는 기술입니다.(***)

ORM, Object-Relational Mapping
- 추상적인 기술(개념)

JPA 구현 기술 > JPA 구현체
- Hibernate > 우리가 사용하는 기술(스프링은 무조건 이 기술을 씀)
- EclipseLink
- Apache OpenJPA

JPA 장점
- SQL 작성을 안함.
- 반복적인 CRUD 작업 자동화
- 생산성 향상
- DB의 컬럼 추가/삭제 > 관련 SQL 수정 안함 > JPA가 자동화
- 모든 데이터 조작을 자바 입장에서 함
	> 우리의 관심사를 자바 & 오라클에 둘 필요 없이 자바만 보면 됨

JPA 단점
- 학습 곡선이 높음
- 복잡한 쿼리에는 제한적

JPA 설정
1. build.gradle > 나중에 추가
2. application.yml

파일 생성
- boot-jpa > "script.sql"
- "com.test.jpa.entity" > "Address.java"	//DTO
- "com.test.jpa.repository" > "AddressRepository.java"(I)	//DAO
- "com.test.jpa.controller" > "AddressController.java"
- "com.test.jpa.dto" > "AddressDTO.java"

- src/test/main > com.test.jpa > "JPATest.java"

- templates > "result_dto.html"		//객체(DTO) 출력
			> "result_list.html"	//목록(list) 출력
			> "result_item.html" 	//단일값 출력

- src/test/main > com.test.jpa > "BuildTest.java"


2024년 11월 19일 

오라클 버전 호환성이 안맞아서 오라클 재설치
단 xe버전은 동시에 두개를 설치하지 못하므로 기존 오라클을 제거 후 설치
- oracle xe 검색
- https://www.oracle.com/kr/database/technologies/xe-downloads.html

Oracle Database 21c 설치

면접?

면접에서 기술질문을 할 때는 우리 쪽 커리큘럼을 모름, 알고 싶지도 않음
이력서에 적혀 있는 커리큘럼 목차를 보고 어떤 것을 학습했는지 알 수 있음

예시
클래스에 대한 질문을 했다면
- 우선 1~2문장으로 적당히 대답하고
- 그 후 추가 질문이 있다면 1분 분량으로 말할 수 있게끔 준비

지식을 이해하는 것보다 말하는 방법도 중요 연습하고 가야함 

일반적인 질문을 함 ex. 교재
심도있게 들어간다면 견해가 다 다르기 때문에 모호해짐

어느선까지 대답할 지 본인이 생각

코딩테스트 > 기대치가 낮음, 단 성의는 보여야 함
- 백준, 프로그래머 수준 X > 지원인원이 많기 때문에 변별력을 위해 어렵게 출제
- 보통 수업 문제 수준
- 손코딩 늘어나는 추세 > 모르는 애들은 하나도 못하기 때문에
1. 제어문
2. 자료구조(배열 or 컬렉션)

주민등록번호 유효성 > 손코딩 > 실제 코드화 시키지 못하더라도 글이라도 적기
	> 아예 모르겠다고 해도 백지를 내면 아예 탈락 > 실력만 보는게 아니라 태도도 봄

질의 응답

[자바]
1. 자바란?
2. 값형 vs 참조형
	값형/참조형 자료형, 장단점
3. 값형의 형변환 vs 참조형의 형변환
4. 변수 스코프 > 자바의 변수의 종류 ? 지역 변수, 멤버 변수, 각각 변수의 생명주기
5. 클래스 > 개념만? 아님 물고늘어지는 경우도 많음
	- 클래스 써봤어?
	- 클래스를 어떤 업무에 적용(***********)
	- 적용했는데 한번에 성공했는지, 실패했는지
	- 성공했다면 성공 원인이 뭔지, 실패했다면 실패 원인이 뭔지, 개선점
6. 객체
7. 인스턴스
8. 생성자
9. 오버로딩
10. 접근지정자
11. 상속
12. 추상 클래스/메서드
13. 인터페이스
14. 제네릭
15. 정적 멤버
16. 컬렉션 > 리스트 vs 맵 vs 셋 
	> 프로젝트 컬렉션 반드시 사용해야할 만한 경우가 있었나? 
	> 있다면 그 이유? 실제로 했다면 어떤 컬렉션을 사용했는가? 
	> 반드시 그 컬렉션을 사용해야하는 이유가 있었냐? 
	> 적합한 용도로 썼는지 궁금해 함

java se - 기본자바
java ee - enterprise edition으로 웹 개발 등을 확장 기능 제공

메소드 인자를 넘기는 방식
- Call by Reference > 주소값 전달 > 해당 주소값의 값을 변화 시키는 것이다 보니 > 사이드 이펙트가 있음
- Call by Value > 값 전달 > 값만 전달하기 때문에 전달 받은 곳에서 값을 조작해도 원본에는 영향을 미치지 않음 > 사이드 이펙트가 없음
C#의 경우 ref로 Call by Reference를 구현함
자바는 Call by Value 밖에없음 

[오라클]
0. 키워드 select, from, where, group by, ...
1. 질문 사항이 딱히 없어서 업무를 구현한 SQL에 대한 질문이 많음
2. 조인
	- 종류, 특징, 장단점
	- 단순, 내부, 외부 조인가 무엇인지, 성질
	- 어떤 업무에 적용했는지(***) 

3. 서브쿼리
4. 오브젝트 종류 > 트리거, 인덱스 등..
5. PL/SQL
6. 정규화 > 1~3 정규형
	- 모델링할 때 어떤 사례에 적용했는지 필요함
7. 트랜잭션 > 어떤 업무?
8. 옵티마이저(관심)
	- between, in
	- join, subquery > (옵티마이저) > 최적의 SQL로 변경

- https://dev-coco.tistory.com/158


[백앤드]
- WAS와 WS
Tomcat(JSP)
- 아파치 > 웹서버
- 아파치 톰캣 > 웹서버(HTML, 정적 파일 응답) + WAS(컨테이너, 처리 능력이 있는 서버)
- 웹서버(nginx) + 톰캣(was)
- Servlet/JSP/Spring

- 빈등록하는 방법
1. @Component 어노테이션 사용	> 어노테이션 방식
	- @Controller, @Service, @Repository 등등

2. 설정 클래스를 따로 만들고 @Configuration 어노테이션을 사용하고	> 자바 방식
	해당 클래스 안에서 빈으로 등록한 메소드를 만들어 @Bean 어노테이션 사용

- AOP
- VO, BO, DAO, DTO
- VO: 데이터의 원본을 저장하는 객체, 내용 수정X, 읽기 전용 객체
- 싱글톤

2024년 11월 20일
Query DSL 세팅
1. build.gradle 추가
	- 의존성 추가
	//Query DSL
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

	- 기타 추가
// Querydsl 설정부
def generated = 'src/main/generated'

// querydsl QClass 파일 생성 위치를 지정
tasks.withType(JavaCompile) {
	options.getGeneratedSourceOutputDirectory().set(file(generated))
}

// java source set 에 querydsl QClass 위치 추가
sourceSets {
	main.java.srcDirs += [ generated ]
}

// gradle clean 시에 QClass 디렉토리 삭제
clean {
	delete file(generated)
}

2. Gradle tasks
	- views에서 창을 열기
	1. build를 할 프로젝트 열기 > build > clean 우클릭 > Run Gradle Tasks
	2. build 우클릭 > Run Gradle Tasks

- com.test.jpa.entity > "Info.java"
						> "Memo.java"

2024년 11월 21일

프로젝트 생성 
- Name: "boot-security"
- Artifact: "boot-security"
- Package: "com.test.security
- Dependencies: 
	- Spring Web
	- Lombok
	- Spring Boot DevTools
	- Oracle Driver(JDBC)
	- Thymeleaf
	- Spring Data JPA
	- Spring Security
- Finish

시작 페이지
- "com.test.security.controller" > "MainController.java"
- templates > "index.html"
			> "inc" > "header.html"

접속 테스트
- http://localhost:8090
- Security 설정 때문에 403 > 로그인 페이지 리다이렉트
- 추가 설정이 없어도 모든 페이지 Not Allowed로 설정되어 있다.
- username: user
- password: 임시 암호
- 로그인 후 > http://localhost:8090 접속 성공

Security 설정
- Spring Security > security-context.xml 사용
- Spring Boot Security > 자바 설정 사용
- "com.test.security.config" > "SecurityConfig.java"

접속 테스트
- http://localhost:8090

추가 페이지
- admin
- com.test.security.controller > "AdminController.java"
- templates > "admin.html"

접속 테스트
- http://localhost:8090/admin
- 권한 부족 > 403 인증 에러 > 추가로 로그인 폼을 설정해서 로그인 페이지 redirect

커스텀 로그인 구현하기
- com.test.security.controller > "AuthController.java"
- templates > "login.html"

앞으로 
1. 로그인은 사용자 로그인 페이지(/login)를 사용
2. 로그인 처리는 사용자 URL(/loginok)를 사용
	> SecurityConfig.java 수정

접속 테스트
- http://localhost:8090/admin
- 403 > 사용자 로그인 페이지로 이동한다.

BCrypt 암호화 > PasswordEncoder 생성
- SecurityConfig.java 수정

DB 기능 해제
- build.gradle > 주석 해제
- application.yml > JDBC 설정

회원 가입하기
- com.test.security.controller > "MemberController.java"
- "com.test.security.dto" > "MemberDTO.java"
- "com.test.security.service" > "MemberService.java"
- "com.test.security.repository" > "MemberRepository.java"(I)
- "com.test.security.entity" > "Member.java"
- templates > "join.html"

DB 기반의 로그인 구현
- 스프링 시큐리티가 DB에 저장된 회원 정보를 조회한 후 비밀번호를 검증한 후
	서버 세션 저장소에 해당 아이디에 대한 세션을 저장한다.

- com.test.security.service > "CustomUserDetailsService.java"
- com.test.security.dto > "CustomUserDetails.java"










