2024년 11월 12일

JDK 버전 변경
- JDK 11, 8 		> Spring Legacy Project(최대 지원 버전이 JDK 11임)
			> Spring Boot 2.X
- JDK 17, 21, 23	> Spring Boot 3.X(2022 11월) > 보통 최신기술은 실무에 잘 사용하지 않지만 이 기술은 많이 사용

JDK 17 설치
- dev or 기본 폴더

환경변수 
- 여러 버전의 JDK 존재 > 딱 1버전만 JDK(기본값) 설정 가능 > JAVA_HOME 환경 변수
JAVA_HOME > C:\class\dev\jdk-17
Path > %JAVA_HOME%\bin

사용도구 > https://spring.io/tools

sts 툴 설치후 jdk에서 바꾸는 방법
1. SpringToolSuite4.ini에서 바꾸기
2. 프로그램 옵션에서 바꾸기

1. SpringToolSuite4.ini에서 바꾸기
C:\class\dev\jdk-17\bin\javaw.exe

롬복 설치
롬복이 설치된 경로에서 프롬프트를 열고
java.exe -jar lombok.jar 명령어 실행 후 sts가 설치된 경로로 가서 sts.exe 파일로 경로 지정 후 설치

STS 4.26 버전이 java 21 버전 부터 지원하므로 JDK21 재설치
환경변수 다시 바꿔 주고 자바 버전이 바르게 나오는지 터미널에서 확인
java --version > java 21.0.5 2024-10-15 LTS
javac --version > javac 21.0.5

sts 워크스페이스 선택 후 실행
window defender 무시

Preferences > Color and Fonts 바꾸기 - 기본적 encoding이 UTF-8로 설정되어 있으므로 따로 설정이 필요없음

Spring Boot 프로젝트 만드는 방법
1. 개발 툴(Spring Initializr)
2. Spring Initializr

1. New > Spring Starter Project
- name : project name
- Group : 기본 패키지명 ex. com.test
- artifact : project명과 보통 일치시킴
- package : 패키지 ex. com.test.projectname

기존 스프링이나 jsp 프로젝트는 톰캣을 통해서 모든 것이 관리 됐다면
스프링 부트는 자바 프로그램을 실행해서 관리

실행 방법
1. Boot Dashboard 에서 실행
2. 단축키(ctrl + f11)로 실행
3. 프로젝트 우클릭 후 Run as > Spring Boot App (사이트로서 실행)

1. 새프로젝트 : boot-begin
- 의존성 추가
	- Spring Web

스프링 부트 애플리케이션
- com.test.begin > BootBeginApplication.java
			> 프로젝트명 + Application

여러가지 자원
- src/main/resources
	- static
		- 정적 자원들(HTML, CSS, JavaScript, 이미지 등..)
		- http://localhost:8090/
	- templates
		- 이전의 views 폴더 역할
		- JSP 같은 뷰 페이지를 담는 역할
	- application.properties
		- 스프링 설정 + 자바 설정
		- application.properties
		- application.yaml or application.yml

- src/test/java
	- 기존의 단위 테스트와 동일
	- @SpringBootTest

- build.gradle
	- Gradle 빌드 도구 설정 파일
	- pom.xml와 유사한 역할

샘플 파일
- "com.test.bootbegin.controller" > "TestController.java"

1. boot-begin
2. boot-jsp > 추천(X)
3. boot-mybatis
------------------ 내용 많음↓
4. > 2. boot-thymeleaf
5. > 3. boot-jpa
6. spring boot security

Spring Boot + JSP

프로젝트 생성
- Name: "boot-jsp"
- Type: Gradle(Groovy)
- Packaging: Jar
- Java Version: 21
- Language: Java
- Group: "com.test"
- Artifact: "boot-jsp"
- Package: "com.test.jsp"
- Dependencies: 
	- Spring Web
	- Lombok
- Finish

JSP 설정하기 > Spring은 기본적으로 JSP를 모름
- 톰캣 : 아파치와 sun microsystems에서 공동 프로젝트에 의해 만든 대표적인 JSP/서블릿 컨테이너
- jsp를 기본적으로 제공해주지 않는 이유 ? 톰캣의존성을 줄이기 위해 java 기술인 thymeleaf 사용하게 됨
- build.gradle
	- 의존성 정의
		a. compileOnly > 컴파일시에만 사용. 빌드 시 jar에 포함하지 말것.  > 실행 파일 용량 줄이기
		b. runtimeOnly > 런타임시에만 사용. 컴파일 때는 사용 안함. 코드 작성 시 참조 불가능
		c. annotationProcessor > 어노테이션 프로세서에서 사용하는 라이브러리
		d. implementation > 컴파일 + 런타임 때 사용
		e. testCompileOnly > 테스트 코드를 컴파일 때만 사용
		f. testRuntimeOnly > 테스트 코드를 런타임 때만 사용
		g. testImplementation > 테스트 코드를 컴파일 + 런타임 사용
		h. developmentOnly > 개발할 때만 사용 + 배포 시 제외

- application.yml
	- JSP 설정 추가
	
- 파일 생성
	- "com.test.jsp.controller" > "TestController.java"
 	- "com.test.jsp.dto" > "TestDTO.java" 
	- src/main/webapp/WEB-INF/views > "test.jsp"
	- static > "test.html"

기존 방식(Servlet/JSP, Spring)
- 외부 톰캣을 사용
- Hot Deployment 사용 > 소스 반영

현재 방식(Spring Boot)
- 내부 톰캣을 사용
- Spring DevTools 의존성 사용 > Hot Deployment 유사 동작, 완벽하지 않아서 서버를 재시작해야 할 일이 많음

- http://localhost:8090/test.do?name=홍길동&age=20
- http://localhost:8090/test.html

Spring DevTools 미사용
1. Java 코드 변경
	- 자동 반영 안됨.(기다려도 안됨)
	- 부트 애플리케이션(서버)을 재시작(대시보드로)
2. JSP 코드 변경
	- 자동 반영 안됨.(기다려도 안됨)
	- 부트 애플리케이션(서버)을 재시작(대시보드로)
3. 정적 자원 코드 변경
	- 자동 반영 됨(툴마다 다름)

Spring DevTools 사용
1. Java 코드 변경
	- 자동 반영 됨
2. JSP 코드 변경
	- 자동 반영 됨
3. 정적 자원 코드 변경
	- 자동 반영 됨

스프링 부트, Spring Boot
- 스프링 부트는 자바 기반의 웹 애플리케이션과 마이크로서비스를 빠르고 쉽게 만들 수 있는 프레임워크이다.

스프링 부트 특징
1. 자동 구성(Auto Configuration): 프로젝트에 필요한 의존성 or 설정을 자동으로 구성한다.
2. 독립 실행형 애플리케이션: 내장 서버를 포함해서 별도의 외부 환경 설치없이 실행 가능
3. 스프링 스타터: 미리 구성된 의존성 세트로 제공
4. 복잡한 XML 설정 불필요
	- application.yml
	- 기존.xml > Java 설정으로 교체
5. 보일러플레이트 코드 최소화
6. 내장 서버 지원 > Tomcat, Jetty, Undertow 등 > 제우스

스프링 설정 방식
1. xml 방식
2. 어노테이션 방식
3. 자바 방식

1,2 > 기존 방식
2,3 > 부트 방식

서버 아키텍처의 종류 
1. 모놀리식 아키텍처(Monolithic)
	- 하나의 애플리케이션으로 모든 기능을 개발
	- 초기 개발 빠름
	- 배포가 쉽다
	- 유지 보수가 어렵다
	- 기능 변화에 대응 힘듦
	- 기술 스택 선택의 자유도가 낮다
	- 부분 장애 > 전체 장애

2. 마이크로서비스 아키텍처(MSA)
	- 작은 독립적인 서비스를 각각 구현한 뒤 서로 API를 통해서 통신하도록 구성
	- 초기 개발 비용 필요
	- 배포가 힘들다
	- 유지 보수가 쉽다
	- 기능 변화에 유연
	- 기술 스택 선택의 자유도가 높다
	- 부분 장애 > 여파 적음

Spring Boot + MyBatis

프로젝트 생성
- Name: "boot-mybatis"
- Type: Gradle(Groovy)
- Packaging: Jar
- Java Version: 21
- Language: Java
- Group: "com.test"
- Artifact: "boot-mybatis"
- Package: "com.test.mybatis"
- Dependencies: 
	- Spring Web
	- Lombok
	- Spring DevTools
	- Oracle Driver(JDBC)
	- MyBatis Framework
- Finish

 JSP 설정
- build.gradle
	- 의존성 추가

	//JSP
	implementation 'org.apache.tomcat.embed:tomcat-embed-jasper'
	implementation 'jakarta.servlet:jakarta.servlet-api'
	implementation 'jakarta.servlet.jsp.jstl:jakarta.servlet.jsp.jstl-api'
	implementation 'org.glassfish.web:jakarta.servlet.jsp.jstl'
	
	//Lombok 테스트 환경
	testImplementation 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'

JDBC 설정
- application.yml
  datasource:
    driver-class-name: oracle.jdbc.OracleDriver
    url: jdbc:oracle:thin:@localhost:1521/xe
    username: springboot
    password: java1234

2024년 11월 13일

spring boot 계정 생성 

tblAddress 생성 + 데이터 추가(50명)

스프링 부트 > HikariCP(기본적 사용)

DB 관련 단위 테스트
- src/test/java > com.test.mybatis > "DatasourceTest.java"
- src/test/java > com.test.mybatis > "MapperTest.java"

MyBatis 관련 작업
- "com.test.mybatis.mapper" > "AddressMapper.java"(I)
- src/main/resources > "com" > "test" > "mybatis" > "mapper" > "AddressMapper.xml"

업무 페이지
- tblAddress > list.do
- "com.tset.mybatis.controller" > "AddresssController.jaa"
- "com.test.mybatis.service" > "AddressService.java"
- "com.tset.mybatis.domain" > "AddressDTO.java"

- views > "list.jsp"



Spring Boot + MyBatis + Thymeleaf

Spring Boot
- Thymeleaf, Mustache, Groovy, Freemarker, Velocity 등...

Thymeleaf
- 템플릿 엔진 > 뷰 페이지를 만든느 프로그램 or 환경
- 자바 웹 or 독립형 환경 > HTML, JavaScript, CSS등을 처리하는 서버 사이드 템플릿 엔진입니다.

프로젝트 생성 
- Name: "boot-thymeleaf" ***
- Type: Gradle(Groovy)
- Packaging: Jar
- Java Version: 21
- Language: Java
- Group: "com.test"
- Artifact: "boot-thymeleaf"
- Package: "com.test.thymeleaf"
- Dependencies: 
	- Spring Web
	- Lombok
	- Spring DevTools
	- Oracle Driver(JDBC)
	- MyBatis Framework
	- Thymeleaf
- Finish

들어가봐요 여기
https://www.thymeleaf.org/

설정
- application.yml
	- 데이터 소스 설정
	- 서버 포트 변경
	- 타임리프 캐시 비활성화

파일 생성
- "com.test.thymeleaf.controller" > "ThymeleafController.java"
- "com.test.thymeleaf.mapper" > "AddressMapper.java" (I)
- "com.test.thymeleaf.domain" > "AddressDTO.java"

- src/main/resources > templates > "result.html"

- src/main/resoucres/mapper > "AddressMapper.xml"


thymeleaf ecosystem eclipse 설치
- Thymeleaf Eclipse Plugin
- https://www.thymeleaf.org/ecosystem.html
- 사이트에 들어가서 installation의 주소를 이용
- Help > Install New Software > Add
	- Name: Thymeleaf
	- Location: https://www.thymeleaf.org/eclipse-plugin-update-site/
- 모두 동의하여 설치 후 재 실행 하면 STS에 th인텔리센스가 적용됨



1. 주요 기능
	1-1. 개인 맞춤형 추천:
		- 사용자 입력(나이, 성별, 생활습관, 식습관, 건강 상태 등)을 바탕으로 적절한 영양제를 추천하는 알고리즘.
	1-2. 영양제 조합 추천:
		- 특정 목적(예: 면역력 강화, 피로 회복 등)에 맞는 영양제를 조합해 추천.
		- 상호작용 주의 영양제나 과다 복용 경고 메시지 제공.
	1-3. 사용자 건강 정보 관리:
		- 사용자 프로필에 건강 정보, 복용 기록, 알러지 정보 등을 저장하고 관리.
	1-4. 영양제 검색 및 필터링:
		- 카테고리별, 브랜드별, 성분별로 영양제를 검색하고 필터링.
	1-5. 복용 알림 및 스케줄 관리:
		- 복용 스케줄 설정 및 복용 알림 기능.
	1-6. 사용자 리뷰 및 평가:
		- 특정 영양제에 대한 사용자 리뷰 및 평가 기능 제공.
	1-7. 추천 영양제 비교 기능:
		- 추천된 영양제를 비교하고 사용자가 선호하는 영양제를 선택하도록 지원.
2. 보조 기능
	2-1. 영양제 상세 정보 페이지:
		- 영양제의 성분, 효능, 복용법, 주의사항 등 상세 정보 제공.
	2-2. 사용자 피드백 수집:
		- 추천된 영양제의 효과나 사용자 만족도를 평가하고 피드백 수집.
	2-3. 관련 기사 및 건강 정보 제공:
		- 건강 관련 뉴스, 영양제 트렌드 기사 등 부가적인 정보 제공.
	2-4. 추천 알고리즘 개선:
		- 사용자의 피드백을 기반으로 추천 알고리즘을 지속적으로 개선.
	2-5. 포인트 및 리워드 시스템:
		- 특정 활동(리뷰 작성, 영양제 구매 등) 시 포인트 제공 및 리워드 제도.
	2-6. 소셜 기능:
		- 사용자들이 복용 후기를 공유하고 다른 사용자와 교류할 수 있는 커뮤니티 기능.
	2-7. 영양제 통계 데이터:
		- 사용자가 선호하는 영양제 트렌드, 인기 추천 조합 등 통계적 데이터를 시각화하여 제공.
	2-8. 관련 건강 전문가 상담:
		- 전문가와의 상담 예약 기능, 상담 기록 관리 등.
3. 관리자 기능
	3-1. 영양제 정보 관리:
		- 영양제 데이터를 추가, 수정, 삭제할 수 있는 관리 페이지.
	3-2. 추천 알고리즘 관리:
		- 추천 규칙을 관리하고 설정할 수 있는 인터페이스.
	3.3.사용자 관리:
		- 사용자 프로필 및 건강 데이터를 관리하고 사용자 피드백에 응답할 수 있는 기능.
	3-4. 사용자 리뷰 및 평가 관리:
		- 리뷰 및 신고 관리 기능으로 부적절한 리뷰나 사용자 신고 내용을 관리하고 대응할 수 있는 관리자 인터페이스.

